https://jananisai1217.medium.com/difference-between-http1-1-vs-http2-90daa85eba

HTTP is based on a client-server architecture. Internet Engineering Task Force (IETF) release HTTP/2 in 2015, the second major version of the most useful internet protocol, HTTP. Main Goals of HTTP2 makes it differ from HTTP1.1.
Image for post
Request Multiplexing
HTTP2 can send multiple request for data in parallel over a single TCP Connection. So multiple web files can be downloaded asynchronously from one server. So this makes your website load much faster without any kind of optimization.
Header Compression
HTTP/2 compresses a large number of redundant header frames, with the help of HPACK Specification, which compresses the individual value of the header before it is transferred to the server. This reduces the overhead in parsing the data.
Binary Protocol
Previously, HTTP1 used to process text commands to complete the request- response cycles. But HTTP2 uses binary commands for the same task. So the browser that uses HTTP2 will first convert the text commands into binary and then transmits over the network.
It makes it less prone to errors and eliminates security concerns. This improves the resource utilization capability with compact representation of commands which in-turn improves its processing speed.
Server Push
This will allow the server to “push” responses proactively into client caches. So it can additionally send cacheable information to the client which is not requested by client but it may be anticipated in future requests. So by this the client can reuse the cache resources anytime across different pages.
The actual difference between HTTP/1.1 and HTTP/2 comes with server push example.
Suppose that there is a pizza corner , so the customer (client) asks (request) waiter (server) for a huge Mexican Green wave pizza . The waiter then gets the pizza from the kitchen (application logic), the waiter then thinks to get a bottle of coke along with the pizza. So he brings that also , thinking they may need in future. The end result of this would be only one TCP connection and only one request that will significantly lower the server load.